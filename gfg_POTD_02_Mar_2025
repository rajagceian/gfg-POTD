class Solution {
public:
  vector<int> maxOfSubarrays(vector<int>& arr, int k) {
    vector<int> ans;
    deque<int> dq;
    int n = arr.size();

    for (int i = 0; i < n; i++) {
        // Remove out of window elements
        if (!dq.empty() && dq.front() == i - k) {
            dq.pop_front();
        }

        // Remove smaller elements (They won't be maximum)
        while (!dq.empty() && arr[dq.back()] <= arr[i]) {
            dq.pop_back();
        }

        // Push current index
        dq.push_back(i);

        // Add to answer after first window is completed
        if (i >= k - 1) {
            ans.push_back(arr[dq.front()]);
        }
    }
    return ans;
}
};
