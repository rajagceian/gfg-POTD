class Solution {
  public:
    // Function to serialize a tree and return a list containing nodes of tree.
    void inorder(Node* root , vector <int> &ans){
        if(!root) return;
        inorder(root->left , ans);
        ans.push_back(root->data);
        inorder(root->right , ans);
    }
    vector<int> serialize(Node *root) {
        // Your code here
        vector <int> ans;
        inorder(root , ans);
        return ans;
    }

    // Function to deserialize a list and construct the tree.
    Node* createBST(vector <int> & arr , int lo , int hi){
        if(lo > hi) return nullptr;
        int mid = lo + (hi - lo)/2;
        Node* root = new Node(arr[mid]);
        root->left = createBST(arr,lo,mid-1);
        root->right = createBST(arr,mid+1,hi);
        
        return root;
    }
    Node *deSerialize(vector<int> &arr) {
        // Your code here
        int n = arr.size();
        if(!n) return nullptr;
        return createBST(arr,0,n-1);
    }
};
